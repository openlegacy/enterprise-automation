steps:
  - name: gcr.io/cloud-builders/git
    args:
      - "-c"
      - >
        git clone --branch $BRANCH_NAME
        https://$$GITHUB_TOKEN@github.com/openlegacy/enterprise-automation.git
        /workspace/enterprise-automation
    id: Git-Clone
    entrypoint: bash
    secretEnv:
      - GITHUB_TOKEN

  - name: "ubuntu:latest"
    args:
      - "-c"
      - |
        # Update package lists and install required tools
        apt-get update
        apt-get install -y curl jq apt-transport-https gnupg2 software-properties-common wget tar unzip gettext

        # Install kubectl
        curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
        echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | tee -a /etc/apt/sources.list.d/kubernetes.list
        apt-get update
        apt-get install -y kubectl

        # Install OpenShift CLI (oc)
        OC_VERSION="4.13.0"
        wget https://mirror.openshift.com/pub/openshift-v4/clients/ocp/$${OC_VERSION}/openshift-client-linux.tar.gz
        tar -xzf openshift-client-linux.tar.gz -C /usr/local/bin oc kubectl
        chmod +x /usr/local/bin/oc
        rm openshift-client-linux.tar.gz
        echo "Installed OpenShift CLI version:"
        oc version

        # Install Helm
        curl https://baltocdn.com/helm/signing.asc | apt-key add -
        echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
        apt-get update
        apt-get install -y helm

        # Install OpenSSL
        apt-get install -y openssl

        # Navigate to the directory
        cd /workspace/enterprise-automation

        # Login to OpenShift first (this sets the kubectl context)
        oc login --token=sha256~E4OrOfDhRvBZfxQgVyOe2dV7EYw0SdpGa1ULvljPYbQ --server=https://api.cluster07.ol-ocp.sdk-hub.com:6443 --insecure-skip-tls-verify=true

        # Make script executable and run it with error handling
        chmod +x script.sh

        # Run script and capture exit code
        ./script.sh
        SCRIPT_EXIT_CODE=$?

        # Write exit code to a file for later steps to access
        echo $SCRIPT_EXIT_CODE > /workspace/script_exit_code.txt

        # Return the script's exit code
        if [ $SCRIPT_EXIT_CODE -ne 0 ]; then
          echo "Script failed with exit code $SCRIPT_EXIT_CODE"
          exit $SCRIPT_EXIT_CODE
        fi
    id: Run-Installer-Script
    entrypoint: bash

  - name: gcr.io/cloud-builders/curl
    args:
      - "-c"
      - |
        # Determine if the previous step succeeded
        SCRIPT_EXIT_CODE=0
        if [ -f /workspace/script_exit_code.txt ]; then
          SCRIPT_EXIT_CODE=$(cat /workspace/script_exit_code.txt)
        fi

        # Set the status message based on the exit code
        if [ "$SCRIPT_EXIT_CODE" -eq 0 ]; then
          STATUS="✅ Success"
          MSG="Hub Enterprise installation completed successfully."
        else
          STATUS="❌ Failed"
          MSG="Hub Enterprise installation failed with exit code $SCRIPT_EXIT_CODE. Please check the logs for details."
        fi

        # Send notification with status
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\": \"*Build:* $BUILD_ID\n*Environment:* $TRIGGER_NAME\n*Branch:* $BRANCH_NAME\n*Status:* $STATUS\n$MSG\"}" \
          $$SLACK_WEBHOOK

        # If script failed, propagate the error to make the build step fail
        if [ "$SCRIPT_EXIT_CODE" -ne 0 ]; then
          exit $SCRIPT_EXIT_CODE
        fi
    id: Slack-Notification
    entrypoint: bash
    secretEnv:
      - SLACK_WEBHOOK

timeout: 1800s
options:
  logging: CLOUD_LOGGING_ONLY
availableSecrets:
  secretManager:
    - versionName: projects/qa-automation-hub-api-poc/secrets/GITHUB_TOKEN/versions/latest
      env: GITHUB_TOKEN
    - versionName: projects/qa-automation-hub-api-poc/secrets/SLACK_WEBHOOK/versions/latest
      env: SLACK_WEBHOOK
